{"version":3,"sources":["knight.svg","config/config.js","views/StepOne.js","views/StepTwo.js","views/Wizard.js","views/Home.js","components/Square.js","api/api.js","components/Board.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","config","apiUrl","window","location","origin","StepOne","classNam","React","Component","StepTwo","to","steps","name","component","Wizard","className","Home","src","logo","alt","Square","props","onClick","x","y","highlight","value","background","odd","getSquareColor","boxShadow","undefined","styles","Object","assign","key","id","style","getKnightMoves","position","Promise","resolve","reject","a","axios","method","url","resp","data","Board","state","squares","loading","this","setState","knightMoves","secondTurn","possiblePositions","second_turn","response","status","console","error","i","j","handleSquareClick","includes","xAxis","board","line","length","fieldName","push","renderSquare","renderBoard","App","path","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.f51d77fb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/knight.d00e94dd.svg\";","const config = {\n    apiUrl: process.env.NODE_ENV === \"production\"\n        ? window.location.origin\n        : \"http://localhost:3000\"\n\n};\n\nmodule.exports = config;","import React from 'react'\n\nexport class StepOne extends React.Component {\n  constructor() {\n    super()\n \n  }\n\n  render() {\n    return (\n      <div classNam=\"step-text\">\n        <p>Knight moves is a game to show the possible positions that a knight to be after 2 turns.</p>\n        <p>The cells are highlighted</p>\n      </div>\n    )\n  }\n}","import React from 'react'\nimport { Link } from \"react-router-dom\";\n\nexport class StepTwo extends React.Component {\n  constructor() {\n    super()\n\n  }\n\n  render() {\n    return (\n      <div>\n        <p>sdsfsdf</p>\n        <Link to=\"/chessboard\">\n          <button>GO</button>\n        </Link>\n\n\n      </div>\n    )\n  }\n}","import React from 'react'\nimport Multistep from 'react-multistep';\nimport { StepOne } from './StepOne'\nimport { StepTwo } from './StepTwo'\n\n\nconst steps = [\n    { name: 'Step One', component: <StepOne /> },\n    { name: 'Step Two', component: <StepTwo /> }\n];\n\nexport default class Wizard extends React.Component {\n    constructor() {\n        super()\n    }\n\n    render() {\n        return (\n            <div className='container'>\n                <div>\n                    <Multistep steps={steps} />\n                </div>\n\n            </div>\n        )\n\n    }\n\n\n\n\n\n}","import React from 'react';\nimport logo from '../knight.svg';\n\n\nimport { Link } from \"react-router-dom\";\n\nfunction Home() {\n\n    return (\n\n        <div className=\"home\">\n\n            <header className=\"home-header\">\n                <img src={logo} className=\"home-logo\" alt=\"logo\"></img>\n                <h1>Knight Moves</h1>\n\n\n                <Link to=\"/wizard\">\n                    <button className=\"start-button\">  Start</button>\n                </Link>\n\n            </header>\n\n        </div>\n    );\n}\n\nexport default Home;","import React from 'react';\n\nexport default function Square(props) {\n    let { onClick, x, y, value, highlight } = props;\n\n    const background = getSquareColor(x, y);\n    const boxShadow = highlight ? 'inset 0px 0px 0px 0.5vmin #A6E1FA' : undefined\n    const styles = Object.assign({ background, boxShadow });\n    return (\n        <button className=\"square\" onClick={onClick} key={`square-${x}-${y}`}\n            id={`square-${x}${y}`} style={styles}>\n            {/* {value} */}\n        </button>\n    );\n}\n\n\nfunction getSquareColor(x, y) {\n    const lightSquareColor = '#0E6BA8';\n    const darkSquareColor = '#0A2472';\n\n    const odd = x % 2;\n    if (y % 2) {\n        return odd ? lightSquareColor : darkSquareColor;\n    }\n    return odd ? darkSquareColor : lightSquareColor;\n}\n","import axios from 'axios';\nimport config from '../config/config';\n\nexport function getKnightMoves(position) {\n    return new Promise(async (resolve, reject) => {\n        try {\n            const resp = await axios({\n                method: 'get',\n                url: `${config.apiUrl}/api/knightmoves/${position}`\n            });\n\n            resolve(resp.data);\n\n        } catch (error) {\n            reject(error);\n        }\n\n    })\n\n}\n\n","import React from 'react';\nimport Square from './Square';\nimport { getKnightMoves } from '../api/api';\n// import '../css/board.css';\n\nclass Board extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            squares: [],\n            loading: false\n        }\n    }\n\n    async handleSquareClick(name) {\n        this.setState({ loading: true });\n    \n        try {\n            const knightMoves = await getKnightMoves(name);\n\n            let secondTurn = knightMoves.possiblePositions.second_turn;\n            this.setState({ squares: secondTurn });\n\n        } catch (error) {\n            if (error && error.response && error.response.status === 400) {\n                console.error(\"Bad request - error: \", error.response.data);\n            } else {\n                console.error(error);\n            }\n\n        } finally {\n            this.setState({ loading: false });\n        }\n\n    }\n\n    renderSquare(name, i, j) {\n        return (\n            <Square\n                value={name}\n                onClick={() => this.handleSquareClick(name)}\n                x={i}\n                y={j}\n                key={name}\n                highlight={this.state.squares.includes(name)}\n            />\n        );\n    }\n\n    renderBoard() {\n        const xAxis = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'];\n        const board = [];\n\n        for (let i = 8; i > 0; i--) {\n            let line = [];\n            for (let j = 0; j < xAxis.length; j++) {\n                let fieldName = xAxis[j] + i\n                line.push(this.renderSquare(fieldName, i, j));\n\n            }\n            board.push(\n                <div className=\"board-row\">\n                    {line}\n                </div>\n            )\n        }\n\n        return board;\n    }\n\n    render() {\n          return (\n            <div key=\"board\" className=\"board\">\n                {this.renderBoard()}\n            </div>\n\n        );\n    }\n}\n\nexport default Board;","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport './css/skeleton.css';\nimport './css/prog-tracker.css';\nimport './css/home.css';\nimport './css/board.css';\n\nimport Wizard from './views/Wizard';\nimport Home from './views/Home';\nimport Board from './components/Board';\n\nfunction App() {\n\n  return (\n    <Router>\n      <div>\n        <Switch>\n          <Route path=\"/wizard\">\n            <Wizard />\n          </Route>\n          <Route path=\"/chessboard\">\n            <Board />\n          </Route>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}